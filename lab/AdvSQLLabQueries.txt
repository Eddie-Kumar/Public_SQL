--Lab Setup for Basic/Advanced SQL Exercises:
--Sample database: Employee Management System
=============================================

---------------------------------------
--All rights reserved. GPL-GNU licence.
--No responsibility will be taken by the author for any issues that may be caused by any code in this file.
-------------------------------------
--TO BE EXECUTED IN SSMS (NOT ONLINE LAB-WEBSITES):

--Check SQL Server details (name/version):
print @@servername  --OR select SERVERPROPERTY('ServerName')		-- host-server & named-instance name.
print @@version
print system_user

-------------------------------------
--Do NOT run following database creation without updating the File-Paths first.
--(Alterntively, in SSMS create database using GUI (Right click "Databases" -> "New Database")
CREATE DATABASE [EmpDb]
 ON  PRIMARY ( NAME = N'EmpDb', FILENAME = N'C:\temp\EmpDb.mdf')
 LOG ON ( NAME = N'EmpDb_log', FILENAME = N'C:\temp\EmpDb_log.ldf' )
-------------------------------------

--DB state:
SELECT database_id, name, state_desc [DB_State], recovery_model_desc, user_access_desc, collation_name, compatibility_level FROM sys.databases WHERE name = 'EmpDb'
--Change Recovery Model:
ALTER DATABASE [EmpDb] SET RECOVERY SIMPLE 
GO

USE EmpDb
GO

print db_name()  --View database-name in use.
--------------------------------


--SAMPLE TABLES CREATION WITH DATA:
-----------------------------------

--Create emp table:
create table emp (
	eid	int 	  PRIMARY KEY,
	ename	varchar(100)	,
	jobtitle	varchar(100)	,
	managerid	int	,
	hiredate	date	,
	salary	money	,
	commission	decimal(9,2)	,
	did	int ,
	rid int
)			

EXEC sp_tables @table_owner='dbo'
EXEC sp_help 'emp'

insert into emp (eid,ename,jobtitle,managerid,hiredate,salary,commission,did,rid)
	Values
	(	68319, 'Kylie', 'President', 68319, '2009-11-18', 60000.00, NULL , 10	, NULL ),
	(	66928, 'Bob', 'General Manager', 68319, '2013-05-01', 27500.00, 0.33 , 10	, NULL ),
	(	67832, 'Clare', 'Technical Manager', 66928, '2011-06-09', 25500.00, NULL , 10	, NULL ),
	(	65646, 'John', 'Sales Manager', 66928, '2014-04-02', 29570.00, NULL , 10	, NULL ),
	(	67858, 'Scarlet', 'Analyst', 67832, '2017-04-19', 3100.00, NULL , 20	, NULL ),
	(	69324, 'Mark', 'DBA', 67832, '2012-01-23', 1900.00, NULL , 20	, NULL ),
	(	69062, 'Frank', 'Analyst', 67832, '2011-12-03', 3100.00, NULL , 20	, NULL ),
	(	63679, 'Sandra', 'Developer', 67832, '2010-12-18', 2900.00, NULL , 20	, NULL ),
	(	64989, 'Irene', 'Sales Representative', 65646, '2018-02-20', 1700.00, 0.1, 30	, 1 ),
	(	65271, 'Dwayne', 'Sales Representative', 65646, '2011-02-22', 1350.00, 0.05, 30	, 2 ),
	(	66564, 'Gerogia', 'Sales Representative', 65646, '2011-09-28', 1400.00, 0.02, 30	, 1 ),
	(	66569, 'Matt', 'Sales Representative', 65646, '2019-01-28', 1325.00, 0.02, 30	, 2 ),
	(	66571, 'Raj', 'Sales Representative', 65646, '2013-02-15', 1190.00, 0.02, 30	, 5 ),
	(	68454, 'Tucker', 'Sales Representative', 65646, '2011-09-08', 1600.00, 0.01, 30	, 3 ),
	(	68455, 'Sam', 'Sales Representative', 65646, '2020-09-18', 1400.00, 0.01, 30	, 4 ),
	(	68736, 'Andy', 'Technical Support', 67832, '2017-05-23', 1200.00, NULL , 20	, NULL ),
	(	69000, 'Julie', 'Sales Apprentice', 65646, '2011-12-03', 950.00, NULL , 30 , 4	)


--Create dept table:
CREATE TABLE [dbo].[dept](
	[did] [int] NOT NULL,
	[DeptName] [nchar](30) NULL
)

INSERT INTO dept ([did],[DeptName])
VALUES
	(10,	'Mgmt'),
	(20,	'Tech'),
	(30,	'Sales'),
	(40,	'Procurement')
    
--Create region table:
CREATE TABLE [dbo].[region](
	[rid] [int] NOT NULL,
	[RegionName] [nchar](30) NULL
)

INSERT INTO region ([rid],[RegionName])
VALUES
	(1,	'Americas'),
	(2,	'Europe'),
	(3,	'Australias'),
	(4,	'Africa'),
	(5,	'Asia'),
	(6,	'Antarctica')

-------------------------------------------------------
EXEC sp_tables @table_owner='dbo'
SELECT * FROM emp
SELECT * FROM dept
SELECT * FROM region
-------------------------------------------------------

EXEC sp_help 'emp'
EXEC sp_help 'dept'
EXEC sp_help 'region'

--Creating PK on DEPT:
ALTER TABLE dept
ADD CONSTRAINT pk_did
PRIMARY KEY (did)

--Creating PK on REGION table:
ALTER TABLE region
ADD CONSTRAINT pk_rid
PRIMARY KEY (rid)

--FK for DEPT:
ALTER TABLE emp
ADD CONSTRAINT fk_did
FOREIGN KEY (did) REFERENCES dept(did)

--FK for REGION:
ALTER TABLE emp
ADD CONSTRAINT fk_rid
FOREIGN KEY (rid) REFERENCES region(rid)


--List employees in Sales depmartment (columns: eid, ename, dept_name):
SELECT eid, ename, DeptName FROM emp
JOIN dept ON emp.did = dept.did
WHERE dept.DeptName = 'Sales' --WHERE dept.did = 30


--List employees in Sales depmartment but not in "Asia"  region (columns: eid, ename, dept_name and RegionName):
SELECT eid, ename, DeptName, r.RegionName FROM emp e
	JOIN dept d ON e.did = d.did
	JOIN region r ON e.rid = r.rid
WHERE d.DeptName = 'Sales'
	AND r.rid <> 5
	

--Employees counts by departments: (DeptName, Count_of_Employees):
SELECT d.DeptName, count(e.eid) AS 'Count_of_Employees' FROM emp e
	JOIN dept d ON e.did = d.did
GROUP BY d.DeptName


--Employees counts by departments: (DeptName, Count_of_Employees) excluding "Mgmt" department:
SELECT d.DeptName, count(e.eid) AS 'Count_of_Employees' FROM emp e
	JOIN dept d ON e.did = d.did
WHERE (e.commission <= 0.02 OR e.commission IS NULL)
GROUP BY d.DeptName
HAVING d.DeptName <> 'Mgmt'

--Get employee drawing 2nd highest salary: (ename, salary):
-- use different 3 methods to solve this 1) CTE, 2) Inner query, 3) OFFSET, 4) using "Derived Table and Row_Number() function".

--Method-1: CTE:
;WITH cte_Salary AS (
	SELECT TOP 2 ename,salary FROM emp ORDER BY salary DESC
)
SELECT TOP 1 ename,salary FROM cte_Salary
ORDER BY salary 

--Method-2: Inner query:
SELECT TOP 1 e.ename, e.salary, e.jobtitle FROM emp e
WHERE e.salary <> (select max(salary) from emp)
--WHERE eid <> (select top 1 eid from emp order by salary desc)
ORDER BY e.salary DESC

--Method-3:
SELECT ename,salary FROM emp
ORDER BY salary DESC
OFFSET 1 ROW FETCH NEXT 1 ROW ONLY

--Method-4: using "Derived Table and Row_Number() function"
SELECT * FROM
(SELECT  ROW_NUMBER() OVER(ORDER BY salary DESC) AS row, ename,salary FROM emp) AS e
WHERE row = 2


--List employees hired between 2012 and 2015: (ename, hiredate):
select * from emp
where hiredate BETWEEN '2012-01-01' AND '2015-12-31'

--List employees hired on/before year 2011 (using YEAR() function):
select *, year(hiredate) as year from emp
where year(hiredate) <= '2011'

--Print last day of the previous month: (use MONTH(), GETDATE() AND DATEADD() functions)
SELECT MONTH( GETDATE() ) 

SELECT DATEADD(YEAR,10,GETDATE()) 
SELECT DATEADD(MONTH,-1,GETDATE())  --DATE a month ago.
SELECT DATEADD(MONTH, DATEDIFF(MONTH, -1, GETDATE())-1, -1) as 'last date of previous month'
SELECT CAST(DATEADD(MONTH, DATEDIFF(MONTH, -1, GETDATE())-1, -1) AS DATE) as 'last date of previous month' --date part only.
SELECT DATEPART(YEAR, GETDATE()) AS [CURRENTYEAR]


--Create a store procedure that returns all employees details of those who work in 'Sales':
CREATE PROC sp_EmpSales
AS
BEGIN 
	SELECT eid, ename, DeptName FROM emp
	JOIN dept ON emp.did = dept.did
	WHERE dept.DeptName = 'Sales' --WHERE dept.did = 30
END
--Call:
EXEC sp_EmpSales


--Create a store procedure that returns all employees details of specified DeptId (based on what's passed in):
CREATE PROC sp_EmpForDeptid @did int
AS
BEGIN 
	SELECT eid, ename, DeptName FROM emp
	JOIN dept ON emp.did = dept.did
	WHERE dept.did = @did
END
--Call:
EXEC sp_EmpForDeptid @did = 20


--Write a stored proc (called "AgeCalculator") that accepts your date of birth, then returns your age with break-down 
--(e.g.: "Today you are x year(s), x month(s) and x days old.")
--Optionally, add validation to ensure that the date of birth is passed in (as parameter), e.g., if DOB not supplied it asks for it.
--ISO date format: 'yyyy-mm-dd'
--Using: DATEADD, DATEDIFF, DATEPART.
CREATE PROC AgeCalculator(@dob DATE = NULL)
AS
BEGIN
	DECLARE @y INT
	SET @y = DATEDIFF(YEAR, @dob, getdate())
	PRINT 'You are ' + cast(@y AS varchar(4)) + ' years old.'
END
--Call:
EXEC AgeCalculator @dob = '2010-10-31'


--Using simple While loop print numbers from 1 to 10:
DECLARE @i INT = 1
WHILE @i <= 10
BEGIN
	PRINT @i
	SET @i = @i + 1
END


--Check if a given number is a Prime number.
--Using MOD operator (%) and Loop/BREAK:

DECLARE @n INT = 29
DECLARE @i INT = @n/2
DECLARE @isPrime BIT = 1

WHILE @i >= 2
BEGIN
	IF @n % @i = 0
	BEGIN
		SET @isPrime = 0
		BREAK
	END
	SET @i = @i - 1
END
IF @isPrime = 1
	PRINT 'Yes, ' + cast(@n as varchar(40))  + ' is a Prime number.'
ELSE
	PRINT 'No, ' + cast(@n as varchar(40))  + ' is NOT a Prime number.'


--List prime numbers between 1 to 100:
DECLARE @outer INT = 2
DECLARE @i INT
DECLARE @isPrime BIT

WHILE @outer <= 100
BEGIN
	SET @i = @outer/2
	SET @isPrime = 1
	WHILE @i >= 2
	BEGIN
		IF @outer % @i = 0
		BEGIN
			SET @isPrime = 0
			BREAK
		END
		SET @i = @i - 1
	END
	IF @isPrime = 1
		PRINT @outer
	SET @outer = @outer + 1
END


--Create a stored proc that checks if a passed in value/int is a prime number:
CREATE PROC PrimeCheck (@n INT)
AS
BEGIN
	DECLARE @i INT = @n/2
	DECLARE @isPrime BIT = 1

	WHILE @i >= 2
	BEGIN
		IF @n % @i = 0
		BEGIN
			SET @isPrime = 0
			BREAK
		END
		SET @i = @i - 1
	END
	IF @isPrime = 1
		PRINT 'Yes, ' + cast(@n as varchar(40))  + ' is a Prime number.'
	ELSE
		PRINT 'No, ' + cast(@n as varchar(40))  + ' is NOT a Prime number.'
END
--Usage: 
EXEC PrimeCheck @n = 12


use Employee

--Create a function that returns today's date in the UK format:
DROP FUNCTION GetUKDate
CREATE FUNCTION GetUKDate()
RETURNS varchar(18)
AS
BEGIN
	RETURN FORMAT(getdate(), 'dd/MM/yyyy')
END
--Calling:
print dbo.GetUKDate()

EXEC sp_help 'emp'

--Create a function to apply Commission on Salary, if no commission is paid then return 0.0 for that employee:
DROP FUNCTION CalcCommission
CREATE FUNCTION dbo.CalcCommission(@sal money, @comm money)
RETURNS money
AS
BEGIN
	IF @comm IS NULL
	BEGIN
		RETURN 0.0
	END
	ELSE
	BEGIN
		RETURN (@sal * @comm)
	END

	RETURN 0
END


select *, dbo.CalcCommission(salary, commission) AS [Commission]  from emp
where ename = 'Sandra' OR ename = 'Bob'

select isnull(commission,0.0) AS [Commission]  from emp
where ename = 'Sandra' OR ename = 'Bob'


select *, round(dbo.CalcCommission(salary, commission),1) AS [Commission]  from emp
select *, format(dbo.CalcCommission(salary, commission),'£#,#.0') AS [Commission]  from emp
select *, format(dbo.CalcCommission(salary, commission),'£#,#.') AS [Commission]  from emp


--Create a copy of 'emp' table as #temporary table that includes a new (calculated) column to show Commissions on Salaries,
-- if no commission is paid then return 0.0 for that employee:
DROP TABLE #emp
SELECT *,
CASE 
	WHEN commission IS NULL THEN 0.0
	ELSE commission * salary
END AS [Comm]
   --isnull(commission,0.0) AS [Comm]
INTO #emp 
FROM emp

select * from #emp



--Create a table type variable called @emp with just the ename and also includes a new (calculated) column to show Commissions on Salaries,
-- if no commission is paid then return 0.0 for that employee:
DECALRE @emp table(ename VARCHAR(256),comm MONEY)
BEGIN 
	INSERT INTO @emp
	SELECT 
		ename,
		CASE 
			WHEN commission IS NULL THEN 0.0
			ELSE commission * salary
		END AS [Comm]
	FROM emp

	SELECT * FROM @emp
END


--Create a table value function that accepts "deptid" and returns ename and deptid for the given deptid:
CREATE FUNCTION EmpByDeptId(@did int)
RETURNS @empdid TABLE(ename VARCHAR(50), did INT)
AS
BEGIN
	INSERT INTO @empdid SELECT ename, did FROM emp WHERE did = @did
	RETURN
END	
--Call:
SELECT * FROM EmpByDeptId(30)



--CURSOR:
--* Write a simple Cursor to list all employees, display only Employee-Names and Department-names with following format:
-- "Employee X works in X department"
DECLARE @n VARCHAR(99)
DECLARE @d VARCHAR(99)

DECLARE cur_Emps_in_Sales CURSOR
FOR 
	SELECT e.ename, d.DeptName FROM emp e
	JOIN dept d ON e.did=d.did ORDER BY d.DeptName

OPEN cur_Emps_in_Sales
FETCH NEXT FROM cur_Emps_in_Sales INTO @n, @d

WHILE @@FETCH_STATUS = 0
BEGIN
	  PRINT 'Employee "' + @n +'" works in "' + RTRIM(@d) +'" department.'
	  FETCH NEXT FROM cur_Emps_in_Sales INTO @n, @d
END

CLOSE cur_Emps_in_Sales  
DEALLOCATE cur_Emps_in_Sales 


--Write a simple Cursor to list all employees from the Sales team and display their names along with their salaries and commissions.
DECLARE @name VARCHAR(99)
DECLARE @team VARCHAR(99)
DECLARE @salary VARCHAR(99)
DECLARE @commission VARCHAR(99)
DECLARE EmpTeam CURSOR
FOR 
SELECT ename, jobtitle, salary, commission FROM emp WHERE did=30
BEGIN
	OPEN  EmpTeam
	FETCH EmpTeam INTO @name, @team, @salary, @commission
	WHILE @@FETCH_STATUS = 0
	BEGIN
		PRINT 'Employee: ' + @name
		PRINT 'Job Title: ' + @team
		PRINT 'Salary: ' + @salary
		PRINT 'Commissions: ' + @commission
		FETCH EmpTeam INTO @name, @team, @salary, @commission
	END
	CLOSE EmpTeam
END
DEALLOCATE EmpTeam



/*--Complex Cursor:
--Create a copy of Employee table as a temporary table ("#Emp2") with an 
--additinal column called "Commission_Amount" that should be populated with 
--the same value as in "Commission" column.
 Create a Cursor that inserts values into the new column [Commission_Amount] as created above in the "##Emp2" table: 
	1) For employees with non-zero/not-null values in the "Commission%" column, insert: [Salary]*[Commission%].
	2) For employees who work in "Tech" department, insert: £10 (flat/fixed value).
	3) For other employees (who are neither in "Tech" department nor have any "Commission%"), insert: 0.0.
*/
SELECT *, [Commission_Amount] = e.commission
INTO ##Emp2
FROM emp e

select * from ##Emp2

SET NOCOUNT ON;
DECLARE @eid INT
DECLARE @ename VARCHAR(99)
DECLARE @dname VARCHAR(99)
DECLARE @sal DECIMAL(9,2)
DECLARE @comm DECIMAL(9,2)
--select * from dept
DECLARE cur_Emps_Salary_Comm CURSOR 
FOR 
	SELECT e.eid, e.ename, d.DeptName, e.salary, e.Commission_Amount
	FROM ##Emp2 e JOIN dept d ON e.did = d.did
OPEN cur_Emps_Salary_Comm
FETCH NEXT FROM cur_Emps_Salary_Comm INTO @eid, @ename, @dname, @sal, @comm
WHILE @@FETCH_STATUS = 0
BEGIN
	IF ltrim(@dname) LIKE 'Tech%'
		UPDATE ##Emp2 SET Commission_Amount = 10.0 WHERE eid = @eid
	ELSE
		IF ISNULL(@comm,0) = 0
			UPDATE ##Emp2 SET Commission_Amount = 0 WHERE eid = @eid
		ELSE
			--UPDATE ##Emp2 SET Commission_Amount = @sal * ISNULL(@comm,0) WHERE eid = @eid
			--UPDATE ##Emp2 SET Commission_Amount = CAST(@sal AS decimal(9,2)) * ISNULL(@comm,0)  WHERE eid = @eid
			UPDATE ##Emp2 SET Commission_Amount = CAST(@sal AS decimal(9,2)) * CAST(ISNULL(@comm,0) AS decimal(9,2))  WHERE eid = @eid
	PRINT cast(@eid as varchar(99)) + ', ' +  @ename + ', ' +  ltrim(@dname) + ', ' +  cast(@sal as varchar(99)) + ', ' +  cast(ISNULL(@comm,0) as varchar(99))
	FETCH NEXT FROM cur_Emps_Salary_Comm INTO @eid, @ename, @dname, @sal, @comm
END
CLOSE cur_Emps_Salary_Comm  
DEALLOCATE cur_Emps_Salary_Comm
SET NOCOUNT OFF;
--select * from ##Emp2   --AFTER: Check if table created as expected.

use tempdb
EXEC sp_help '##Emp2'



--* Write a simple Try..Catch block to handle error gracefully, manually raise error( e.g.: RAISERROR (50005,12,16):
EXEC sp_addmessage 50005, 1, N'This is a custom error message for errors in our company';
BEGIN TRY
	RAISERROR (50005,12,16)
END TRY 
BEGIN CATCH 
	SELECT ERROR_MESSAGE (), ERROR_NUMBER ()
END CATCH

--Generate a divide-by-zero error, catch it and display its details:
BEGIN TRY
    SELECT 1/0;  -- Generating divide-by-zero error
END TRY
BEGIN CATCH
    SELECT
        ERROR_NUMBER() AS ErrorNumber  		--=> 8134
        ,ERROR_SEVERITY() AS ErrorSeverity		--=> 16
        ,ERROR_STATE() AS ErrorState		--=> 1
        ,ERROR_PROCEDURE() AS ErrorProcedure	--=> NULL
        ,ERROR_LINE() AS ErrorLine			--=> 3
        ,ERROR_MESSAGE() AS ErrorMessage;		--=> Divide by zero error encountered.
END CATCH;

select * from ##Emp2

--* Create another temporary table called "##Emp3" by copying of "Emp" table with an 
-- additinal column called "Bonus" that should be populated with NULLs.
use Employee
drop table "##Emp3"   --Drop if exists.
select *, NULL AS [Bonus]  INTO ##Emp3 from emp  --Create copy of table with additional column.
select * from ##Emp3   --Check if table created as expected.
/* Create a stored proc that inserts values into the newly created column "Bonus" (within the "##Emp3" table) as below:
	1) in the "Bonus" column store [Salary]/[Commision_Amount]
	2) Use Try..Catch block to trap any errors (divide by zero) and deal with errors gracefully (to show appropriate error message).
When called, the stored proc should list all employees along with a newly populated "Bonus" column.
*/
CREATE PROC CalcBonus
AS
BEGIN
	DECLARE @eid INT
	DECLARE @sal MONEY
	DECLARE @comm MONEY
	DECLARE @bonus MONEY

	DECLARE cur_Emps_Bonus CURSOR 
	FOR 
		SELECT e.eid, e.salary, e.commission, e.Bonus
		FROM ##Emp3 e
	OPEN cur_Emps_Bonus
	FETCH NEXT FROM cur_Emps_Bonus INTO @eid, @sal, @comm, @bonus
	WHILE @@FETCH_STATUS = 0
	BEGIN
		BEGIN TRY
			IF ISNULL(@bonus,0) = 0
				UPDATE ##Emp3 SET Bonus = CAST(@sal AS decimal(9,2)) / ISNULL(@comm,0) WHERE eid = @eid
			PRINT cast(@eid as varchar(99)) + ', ' + cast(@sal as varchar(99)) + ', ' +  cast(ISNULL(@comm,0) as varchar(99))+ ', ' +  cast(ISNULL(@bonus,0) as varchar(99))
			FETCH NEXT FROM cur_Emps_Bonus INTO @eid, @sal, @comm, @bonus
		END TRY
		BEGIN CATCH
			PRINT CAST(ERROR_NUMBER() AS VARCHAR(9)) + ': ' + ERROR_MESSAGE()
			FETCH NEXT FROM cur_Emps_Bonus INTO @eid, @sal, @comm, @bonus
		END CATCH
	END
	CLOSE cur_Emps_Bonus  
	DEALLOCATE cur_Emps_Bonus

	Select * from ##Emp3
END
--Usage:
EXEC CalcBonus
-------------------------------------------------




