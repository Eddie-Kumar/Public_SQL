---Basic or Advanced SQL - Lab Setup & Exercises:
---------------------------------------
--All rights reserved. GPL-GNU licence.
--No responsibility will be taken by the author for any issues that may be caused by any code in this file.
-------------------------------------
--TO BE EXECUTED IN SSMS (NOT ONLINE LAB-WEBSITES):

--Check SQL Server details (name/version):
print @@servername  --OR select SERVERPROPERTY('ServerName')		-- host-server & named-instance name.
print @@version
print system_user

CREATE DATABASE [EmpDb]
 ON  PRIMARY ( NAME = N'EmpDb', FILENAME = N'D:\TWuddHq4UG\data_tmp\EmpDb.mdf')
 LOG ON ( NAME = N'EmpDb_log', FILENAME = N'D:\TWuddHq4UG\data_tmp\EmpDb_log.ldf' )

--DB state:
SELECT database_id, name, state_desc [DB_State], recovery_model_desc, user_access_desc, collation_name FROM sys.databases WHERE name = 'EmpDb'
--Change Recovery Model:
ALTER DATABASE [EmpDb] SET RECOVERY SIMPLE 
GO

USE EmpDb
GO

print db_name()  --View database-name in use.
--------------------------------


--SAMPLE TABLES WITH DATA:
--------------------------

--Create emp table:
create table emp (
	eid	int 	 NOT NULL PRIMARY KEY,
	ename	varchar(100)	,
	jobtitle	varchar(100)	,
	managerid	int	,
	hiredate	date	,
	salary	money	,
	commission	decimal(9,2)	,
	did	int ,
	rid int
)			

EXEC sp_tables @table_owner='dbo'
EXEC sp_help 'emp'

insert into emp (eid,ename,jobtitle,managerid,hiredate,salary,commission,did,rid)
	Values
	(	68319, 'Kylie', 'President', 68319, '2009-11-18', 60000.00, NULL , 10	, NULL ),
	(	66928, 'Bob', 'General Manager', 68319, '2013-05-01', 27500.00, 0.33 , 10	, NULL ),
	(	67832, 'Clare', 'Technical Manager', 66928, '2011-06-09', 25500.00, NULL , 10	, NULL ),
	(	65646, 'John', 'Sales Manager', 66928, '2014-04-02', 29570.00, NULL , 10	, NULL ),
	(	67858, 'Scarlet', 'Analyst', 67832, '2017-04-19', 3100.00, NULL , 20	, NULL ),
	(	69324, 'Mark', 'DBA', 67832, '2012-01-23', 1900.00, NULL , 20	, NULL ),
	(	69062, 'Frank', 'Analyst', 67832, '2011-12-03', 3100.00, NULL , 20	, NULL ),
	(	63679, 'Sandra', 'Developer', 67832, '2010-12-18', 2900.00, NULL , 20	, NULL ),
	(	64989, 'Irene', 'Sales Representative', 65646, '2018-02-20', 1700.00, 0.1, 30	, 1 ),
	(	65271, 'Dwayne', 'Sales Representative', 65646, '2011-02-22', 1350.00, 0.05, 30	, 2 ),
	(	66564, 'Gerogia', 'Sales Representative', 65646, '2011-09-28', 1400.00, 0.02, 30	, 1 ),
	(	66569, 'Matt', 'Sales Representative', 65646, '2019-01-28', 1325.00, 0.02, 30	, 2 ),
	(	66571, 'Raj', 'Sales Representative', 65646, '2013-02-15', 1190.00, 0.02, 30	, 5 ),
	(	68454, 'Tucker', 'Sales Representative', 65646, '2011-09-08', 1600.00, 0.01, 30	, 3 ),
	(	68455, 'Sam', 'Sales Representative', 65646, '2020-09-18', 1400.00, 0.01, 30	, 4 ),
	(	68736, 'Andy', 'Technical Support', 67832, '2017-05-23', 1200.00, NULL , 20	, NULL ),
	(	69000, 'Julie', 'Sales Apprentice', 65646, '2011-12-03', 950.00, NULL , 30 , 4	)


--Create dept table:
CREATE TABLE [dbo].[dept](
	[did] [int] NOT NULL,
	[DeptName] [nchar](30) NULL
)

INSERT INTO dept ([did],[DeptName])
VALUES
	(10,	'Mgmt'),
	(20,	'Tech'),
	(30,	'Sales'),
	(40,	'Procurement')
    
--Create region table:
CREATE TABLE [dbo].[region](
	[rid] [int] NOT NULL,
	[RegionName] [nchar](30) NULL
)

INSERT INTO region ([rid],[RegionName])
VALUES
	(1,	'Americas'),
	(2,	'Europe'),
	(3,	'Australias'),
	(4,	'Africa'),
	(5,	'Asia'),
	(6,	'Antarctica')

-------------------------------------------------------
EXEC sp_tables @table_owner='dbo'
SELECT * FROM emp
SELECT * FROM dept
SELECT * FROM region
-------------------------------------------------------


--DROP / DELETE / TRUNCATE
DROP TABLE region

--Delete data:
DELETE FROM [region]
WHERE rid = 4

--Insert back some data:
INSERT INTO [region]
VALUES (4,	'Africa')

--Update data:
UPDATE region
SET RegionName = 'Africas'
where rid = 4

--Truncate all data in a table:
TRUNCATE TABLE   region

--Get details about a table:
SP_HELP 'emp'
--sp_depends <View/Proc_name>


--Add Primary Key to the 'Dept' table:
ALTER TABLE dept
ADD CONSTRAINT pk_did
PRIMARY KEY(did)

--Create relation between Emp & Dept table on 'did' column:
ALTER TABLE emp
ADD CONSTRAINT fk_did
FOREIGN KEY(did) REFERENCES dept(did)

--List Constraint details of specified table:											 
SELECT TABLE_NAME, CONSTRAINT_TYPE,CONSTRAINT_NAME
FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS
WHERE TABLE_NAME='emp'

--Get all details of a table (in SSMS):
sp_help emp
sp_help dept
--alternatively select table name and press Alt+F1.
---------------------------------------------------

--Departments Queries:

--List employees with their dept-names:
select e.ename, d.DeptName from emp e
inner join dept d on e.did = d.did

--List employees with their dept-names but only those who receive more than $25,000.
SELECT e.ename, d.DeptName, e.salary
FROM emp e
JOIN dept d on e.did = d.did
WHERE e.salary >= 25000
ORDER BY e.salary DESC

--List emp-name, jobtitle, dept-name whose job-title starts with 'Sales':
SELECT e.ename, e.jobtitle, d.DeptName  from emp e
JOIN dept d ON e.did=d.did
WHERE e.jobtitle LIKE 'Sales%'

--Retrieve employees details along with the Department names and Region names for employees in Sales dept and NOT in Australias region.
select e.ename, d.DeptName, e.salary, e.jobtitle, r.RegionName from emp e
JOIN dept d on e.did = d.did
JOIN region r on r.rid = e.rid
where r.RegionName NOT LIKE '%Australias%' AND d.DeptName = 'SALES'

--Departments receiving commission:
SELECT distinct d.DeptName  from dept d
JOIN emp e ON e.did=d.did
WHERE e.commission IS NOT NULL
-----------------------------------------------


--MAX SALARY QUERIES:

--Show highest salary amount:
SELECT MAX(SALARY) FROM Emp;

--Get name, deptname, salary, jobtitle of top salary receiver.
	--Method-1:
	SELECT top 1 e.ename, d.DeptName, e.salary, e.jobtitle
	FROM emp e
		JOIN dept d on e.did = d.did
	ORDER BY e.salary DESC

	--Method-2:
	select top 1 e.ename, d.DeptName, e.salary, e.jobtitle from emp e
	inner join dept d on e.did = d.did
	WHERE SALARY < (SELECT MAX(SALARY) FROM EMP)


--Get 2nd highest salary with name, salary, jobtitle (optionally: deptname)
	--and do this in 3 different ways.
	--Method-1: using inner query:
	SELECT top 1 e.ename, e.salary, e.jobtitle
	FROM emp e
	WHERE eid <> (select top 1 eid from emp order by salary desc)
	ORDER BY e.salary DESC

	--Method-2: OFFSET..FETCH:
	select ename, salary, jobtitle from emp
	order by salary desc
	offset 1 row fetch next 1 row only

	--Method-3: using CTE:
	; WITH top2Sals AS 
		(select top 2 * from emp order by salary desc)
	select top 1 * from top2Sals order by salary asc
------------------------------------------------------

--DATE QUERIES:

--1st employee hired: First person who joined the company and still a current employee:
select top 1 * from emp
order by hiredate asc

--List employees hired on/after 2015 (1st Jan 2015).
SELECT  * FROM emp
--use ISO date format / Local format '01/01/2015' not recommended:
WHERE hiredate >= '2015-01-01'
ORDER BY HIREDATE ASC;

--List employees hired between 2012 and 2015:
select * from emp
where hiredate BETWEEN '2012-01-01' and '2015-01-01'

--List employees hired on/before year 2011 (using YEAR() function):
select *, hiredate as year from emp
where year(hiredate) <= '2011'


--List employees hired within 2 years before and 2 years after that of Kylie.
	--and do this in 2 different ways.

	--using inner query:
	SELECT *
	from emp
	WHERE hiredate BETWEEN DATEADD(year, -2, (select hiredate from emp where ename='Kylie'))
	AND DATEADD(year, 2, (select hiredate from emp where ename='Kylie'))

	--using @variables and BETWEEN operator (above query simplified):
	DECLARE @d1 DATE
	DECLARE @d2 DATE

	SET @d1 = DATEADD(year, -2, (select hiredate from emp where ename='Kylie'))
	SET @d2 = DATEADD(year, 2, (select hiredate from emp where ename='Kylie'))

	SELECT *
	from emp
	WHERE hiredate BETWEEN @d1 AND @d2


--List employees hired after Kylie and before Clare:
	--Method-1: using vairables:
	DECLARE @d1 DATE
	DECLARE @d2 DATE

	SET @d1 = (select hiredate from emp where ename='Kylie')
	SET @d2 = (select hiredate from emp where ename='Clare')

	SELECT * FROM emp
	WHERE (hiredate >= @d1 AND hiredate <= @d2)
		AND eid NOT IN (68319, 67832)   -- ('Kylie', 'Clare')

	--Method-2:using CTE or Derived table:
	;WITH K AS	(SELECT TOP 1 hiredate FROM emp where ename = 'Kylie')
	,C AS	(SELECT TOP 1 hiredate FROM emp where ename = 'Clare')
	SELECT * FROM emp 
	WHERE hiredate BETWEEN (SELECT hiredate FROM K) AND ( SELECT hiredate FROM C)
		AND eid NOT IN (68319, 67832);


--List employees along with their regions, including employees who are not in any region:
SELECT * FROM emp e
LEFT OUTER JOIN region r
ON e.rid = r.rid


--List regions that have no employees:
SELECT * FROM region r
LEFT JOIN emp e on r.rid = e.rid
where eid is null


--List employees in Sales dept and in African region:
select e.ename, d.DeptName, e.salary, e.jobtitle, r.RegionName from emp e
JOIN dept d on e.did = d.did
JOIN region r on r.rid = e.rid
where r.RegionName = 'Africa' AND d.DeptName = 'SALES'
-------------------------------------------------------------

--CASE WHEN:
--List all employees with commission and explicitly print "Commission Paid" or "No Commission Paid".
select *,
case when commission > 0 then 'Commission Paid' else 'No Commission Paid'
end as [Commission_Paid]
from emp 
-------------------------------------------------------------

--Manager's Query:
--List all employees with their line manager's names:
	--Option-1: using Self-Join:
	SELECT e.eid, e.ename, e.jobtitle, e.managerid, mgr.ename, mgr.jobtitle 
	FROM emp e
		LEFT OUTER JOIN emp Mgr
	ON mgr.eid = e.managerid

	--Option-2: using Inner-Query:
	SELECT e.eid, e.ename, e.jobtitle, e.managerid, (select top 1 m.ename from emp m where e.managerid=m.eid) AS [Mgr]
	FROM emp e
-------------------------------------------------------------


--------DEMO OF COMMINT, ROLLBACK AND SAVEPOINT:-----------
select count(*) from emp
select * from emp

BEGIN TRAN
insert into emp (eid,ename,jobtitle,managerid,hiredate,salary,commission,did,rid)
	Values
	(	68494, 'Rich', 'Sales Representative', 66928, '2011-09-08', 1600.00, 0.01, 30	, 3 )
SAVE TRAN x1
DELETE FROM emp WHERE salary < 25000
ROLLBACK TRAN  x1
ROLLBACK
select * from emp order by 1
-------------------------------------------------------------

-----------------------END-OF-PART-1-------------------------


-------------------------LAB PART-2-------------------------

--VIEWS:
--Create a VIEW called 'v_Emp_Salary_with_Managers' that creates a view retrieving eName, Salary along with their manager names.
	CREATE VIEW v_Emp_Salary_with_Managers AS
	SELECT e.ename, e.salary, e.managerid, m.ename AS [Mgr-Name] from emp e
	JOIN emp m ON e.managerid=m.eid
--Usage: SELECT * FROM v_Emp_Salary_with_Managers

--Create a simple VIEW that retreives employees who earn more than $25000.
CREATE VIEW empSal25K 
AS
SELECT e.ename, d.DeptName, e.salary
FROM emp e
	JOIN dept d on e.did = d.did
WHERE e.salary >= 25000
--USAGE: SELECT * FROM empSal25K
---------------------------------------------

--STORED PROCEDURES:
--Create a simple stored proc retreives all employees.
create proc usp_emp
AS
BEGIN
	SELECT * FROM emp;
END
--usage: exec usp_emp


--Create a stored proc retreives the employees for a given Manager-ID.
CREATE PROC empsByMgrID (@mid INT)
AS
BEGIN
	--DECLARE @mid INT = 65646
	SELECT e.eid, e.ename, e.jobtitle, e.managerid, (select top 1 m.ename from emp m where e.managerid=m.eid) AS [Mgr]
	FROM emp e
	WHERE e.managerid = @mid
END
--Usage: 
EXEC empsByMgrID @mid = 68319


--* Create a stored proc (called 'usp_Emps_By_ManagerID') that returns list of all the employees for a given Manager_ID.
CREATE OR ALTER PROCEDURE sp_Emp_Salary_with_Managers (@manager_id INT)
AS
BEGIN
	/* 	SELECT e.ename, e.managerid from emp e
	WHERE e.managerid=@manager_id */
	SELECT e.ename, e.salary, e.managerid, m.ename AS [Mgr-Name] from emp e
	JOIN emp m ON e.managerid=m.eid AND e.managerid=@manager_id
END
GO
--Usage: EXEC sp_Emp_Salary_with_Managers @manager_id = 68319



--Write a stored proc (called "AgeCalculator") that accepts your date of birth, then returns your age with break-down 
--(e.g.: "Today you are x year, x month and x days old.")
--Optionally, add validation to ensure that the date of birth is passed in (as parameter), e.g., if DOB not supplied it asks for it.
--ISO date format: 'yyyy-mm-dd'
--Using: DATEADD, DATEDIFF, DATEPART.


--Following Stored Proc pricisely calculates & returns the Age in full Days, Months and Years.
--CREATE OR ALTER PROC AgeCalculator(@dob DATE = NULL)  --WORKS SS2014 ONWARDS.
DROP PROC AgeCalculator
CREATE PROC AgeCalculator(@dob DATE = NULL)
AS
BEGIN
	IF @dob IS NULL
	BEGIN
		SELECT 'Please provide your Date of birth (preferably in ISO format: YYYY-MM-DD)'
		RETURN
	END
	IF @dob > getdate()  --checks if @DOB is in future
	BEGIN
		print 'You have entered a date in future,  please enter a valid date of birth in ISO format: YYYY-MM-DD'
		RETURN
	END
	DECLARE @y INT,@m INT,@d INT --to store date-of-birth year/month/day.
	DECLARE @cy INT,@cm INT,@cd INT --to store current or today's year/month/day.
	DECLARE @t DATE, @dt DATE    --to store temporary dates.
	SET @t = DATEFROMPARTS(DATEPART(YEAR, getdate()), DATEPART(MONTH, @dob), DATEPART(DAY, @dob))
	SET @y = DATEDIFF(YEAR, @dob, getdate())
	IF @t > getdate()  --checks if month & day are higher value
		SET @y = @y - 1
	SET @t = DATEADD(YEAR, @y, @dob)
	SET @m = DATEDIFF(MONTH, @t, getdate())
	IF DATEPART(DAY, @t) > DATEPART(DAY, getdate())
	BEGIN
		SET @m = @m - 1
	END
	SET @t = DATEADD(MONTH, @m, @t)
	SET @d = DATEDIFF(DAY, @t, getdate())
	print 'Date of birth: ' + cast(@dob as varchar(10))
	print 'Date today is: ' + cast(cast(getdate() as date) as varchar(10))
	PRINT 'Today you are ' + cast(@y AS varchar(4)) + ' years, ' + cast(@m AS varchar(2)) + ' months and ' + cast(@d AS varchar(2)) + ' days old.'
END
GO
/*--Usage:
	EXEC AgeCalculator
	EXEC AgeCalculator '2025-01-01'
	EXEC AgeCalculator '2020-01-01'
	EXEC AgeCalculator @dob = '2000/01/01'  --millennium.
	EXEC AgeCalculator @dob = '2022/12/25'  --last Christmas.
	EXEC AgeCalculator @dob = '2025/05/14'  --future date.
	EXEC AgeCalculator @dob = '0001/01/01'  --past (valid) date.
*/
--------------------------------------------------------------


--LOOPS:

--Using simple While loop print numbers from 1 to 10.
DECLARE @i INT = 1
WHILE @i <= 10
BEGIN
	PRINT @i
	SET @i = @i + 1
END


--* Write a stored proc what uses While loop to check if the given number (passed in as a parameter) is a prime number or not.
CREATE PROC PrimeCheck (@n INT)
AS
BEGIN
	DECLARE @i INT = @n/2
	DECLARE @isPrime BIT = 1

	WHILE @i >= 2
	BEGIN
		IF @n % @i = 0
		BEGIN
			SET @isPrime = 0
			BREAK
		END
		SET @i = @i - 1
	END
	IF @isPrime = 1
		PRINT 'Yes, ' + cast(@n as varchar(40))  + ' is a Prime number.'
	ELSE
		PRINT 'No, ' + cast(@n as varchar(40))  + ' is NOT a Prime number.'
END
--Usage: 
--EXEC PrimeCheck @n = 12


--NESTED LOOP:

--Using While loop generate a list of first 100 prime numbers.
DECLARE @outer INT = 2
DECLARE @i INT
DECLARE @isPrime BIT

WHILE @outer <= 100
BEGIN
	SET @i = @outer/2
	SET @isPrime = 1
	WHILE @i >= 2
	BEGIN
		IF @outer % @i = 0
		BEGIN
			SET @isPrime = 0
			BREAK
		END
		SET @i = @i - 1
	END
	IF @isPrime = 1
		PRINT @outer
	SET @outer = @outer + 1
END
-------------------------------------------------------------

--CURSORS:

--* (simple Cursor) to list all employees from the Sales team, display only Employee-Names and Departments.
DECLARE @n VARCHAR(99)
DECLARE @d VARCHAR(99)

DECLARE cur_Emps_in_Sales CURSOR 
FOR 
	SELECT e.ename, d.DeptName FROM emp e
	JOIN dept d ON e.did=d.did
	WHERE d.did = 30 --sales

OPEN cur_Emps_in_Sales  
FETCH NEXT FROM cur_Emps_in_Sales INTO @n, @d

WHILE @@FETCH_STATUS = 0
BEGIN
	  PRINT @n + ', ' + @d
	  FETCH NEXT FROM cur_Emps_in_Sales INTO @n, @d
END 

CLOSE cur_Emps_in_Sales  
DEALLOCATE cur_Emps_in_Sales 


--* Write a simple Cursor to list all employees from the Sales team and display their names along with their salaries and commissions.
DECLARE @name VARCHAR(99)
DECLARE @team VARCHAR(99)
DECLARE @salary VARCHAR(99)
DECLARE @commission VARCHAR(99)
DECLARE EmpTeam CURSOR
FOR 
SELECT ename, jobtitle, salary, commission FROM emp WHERE did=30
BEGIN
	OPEN  EmpTeam
	FETCH EmpTeam INTO @name, @team, @salary, @commission
	WHILE @@FETCH_STATUS = 0
	BEGIN
		PRINT 'Employee: ' + @name
		PRINT 'Job Title: ' + @team
		PRINT 'Salary: ' + @salary
		PRINT 'Commissions: ' + @commission
		FETCH EmpTeam INTO @name, @team, @salary, @commission
	END
	CLOSE EmpTeam
END
DEALLOCATE EmpTeam


DECLARE @n VARCHAR(99)
DECLARE @s VARCHAR(99)
DECLARE @c VARCHAR(99)
DECLARE cur_Emps_Salary_Comm CURSOR FOR 
	SELECT e.ename, e.salary, e.commission FROM emp e WHERE e.did = 30
OPEN cur_Emps_Salary_Comm
FETCH NEXT FROM cur_Emps_Salary_Comm INTO @n, @s, @c
WHILE @@FETCH_STATUS = 0  
BEGIN
	  PRINT @n + ', ' + @s + ', ' + @c
	  FETCH NEXT FROM cur_Emps_Salary_Comm INTO @n, @s, @c
END
CLOSE cur_Emps_Salary_Comm  
DEALLOCATE cur_Emps_Salary_Comm 

--* Create a copy of Employee table as a temporary table ("##Emp2") with an 
--additinal column called "Commision_Amount" that should be populated with 
--the same value as in "Commission" column.

--drop table ##Emp2
SELECT *, [Commission_Amount] = e.commission
INTO ##Emp2
FROM emp e

use EmpDb
drop table if exists "##Emp2"   --Drop if exists.
select *, commission AS [Commision_Amount] 
INTO ##Emp2 from emp  --Create copy of table with additional column.
--Check if table created as expected:
select * from ##Emp2
use tempdb
exec sp_help '##Emp2'



/* Create a Cursor that inserts values into the new column [Commision_Amount] as created above in the "##Emp2" table: 
	1) For employees with non-zero/not-null values in the "Commission%" column, insert: [Salary]*[Commission%].
	2) For employees who work in "Tech" department, insert: £10 (flat/fixed value).
	3) For other employees (who are neither in "Tech" department nor have any "Commission%"), insert: 0.
*/
--Solution:
use Employee
--drop table if exists "##Emp2"   --Drop if exists.
--drop table ##Emp2   --Drop if exists.
--select *, commission [Commision_Amount] INTO ##Emp2 from emp  --Create copy of table with additional column.
--select * from ##Emp2   --BEFORE: Check if table created as expected.
DECLARE @eid INT
DECLARE @ename VARCHAR(99)
DECLARE @dname VARCHAR(99)
DECLARE @sal MONEY
DECLARE @comm MONEY
--select * from dept
DECLARE cur_Emps_Salary_Comm CURSOR 
FOR 
	SELECT e.eid, e.ename, d.DeptName, e.salary, e.Commision_Amount
	FROM ##Emp2 e JOIN dept d ON e.did = d.did
OPEN cur_Emps_Salary_Comm
FETCH NEXT FROM cur_Emps_Salary_Comm INTO @eid, @ename, @dname, @sal, @comm
WHILE @@FETCH_STATUS = 0
BEGIN
	IF ltrim(@dname) LIKE 'Tech'
		UPDATE ##Emp2 SET Commision_Amount = 10.0 WHERE eid = @eid
	ELSE
		IF ISNULL(@comm,0) = 0
			UPDATE ##Emp2 SET Commision_Amount = 0 WHERE eid = @eid
		ELSE
			UPDATE ##Emp2 SET Commision_Amount = CAST(@sal AS decimal(9,2)) * ISNULL(@comm,0)  WHERE eid = @eid
	PRINT cast(@eid as varchar(99)) + ', ' +  @ename + ', ' +  ltrim(@dname) + ', ' +  cast(@sal as varchar(99)) + ', ' +  cast(ISNULL(@comm,0) as varchar(99))
	FETCH NEXT FROM cur_Emps_Salary_Comm INTO @eid, @ename, @dname, @sal, @comm
END
CLOSE cur_Emps_Salary_Comm  
DEALLOCATE cur_Emps_Salary_Comm

--select * from ##Emp2   --AFTER: Check if table created as expected.
---------------------------------


--ERROR HANDLING:

--* Write a simple Try..Catch block to handle error gracefully:
BEGIN TRY
	RAISERROR (50005,12,16)
END TRY 
BEGIN CATCH 
	SELECT ERROR_MESSAGE (), ERROR_NUMBER ()
END CATCH

BEGIN TRY
    -- Generate a divide-by-zero error:
    SELECT 1/0;
END TRY
BEGIN CATCH
    SELECT
        ERROR_NUMBER() AS ErrorNumber  		--=> 8134
        ,ERROR_SEVERITY() AS ErrorSeverity		--=> 16
        ,ERROR_STATE() AS ErrorState		--=> 1
        ,ERROR_PROCEDURE() AS ErrorProcedure	--=> NULL
        ,ERROR_LINE() AS ErrorLine			--=> 3
        ,ERROR_MESSAGE() AS ErrorMessage;		--=> Divide by zero error encountered.
END CATCH;



--* Create another temporary table called "##Emp3" by copying of "Emp" table with an 
-- additinal column called "Bonus" that should be populated with NULLs.
use Employee
drop table "##Emp3"   --Drop if exists.
select *, NULL AS [Bonus]  INTO ##Emp3 from emp  --Create copy of table with additional column.
select * from ##Emp3   --Check if table created as expected.

/* Create a stored proc that inserts values into the newly created Bonus column (within the "##Emp3" table) as below:
	1) [Salary]/[Commision_Amount]
	2) Use Try..Catch block to trap any errors (divide by zero) and deal with errors gracefully (to show appropriate error message).
When called, the stored proc should list all employees along with a newly populated "Bonus" column.
*/
--DROP PROC CalcBonus
CREATE PROC CalcBonus
AS
BEGIN
	DECLARE @eid INT
	DECLARE @sal MONEY
	DECLARE @comm MONEY
	DECLARE @bonus MONEY

	DECLARE cur_Emps_Bonus CURSOR 
	FOR 
		SELECT e.eid, e.salary, e.commission, e.Bonus
		FROM ##Emp3 e
	OPEN cur_Emps_Bonus
	FETCH NEXT FROM cur_Emps_Bonus INTO @eid, @sal, @comm, @bonus
	WHILE @@FETCH_STATUS = 0
	BEGIN
		BEGIN TRY
			IF ISNULL(@bonus,0) = 0
				UPDATE ##Emp3 SET Bonus = CAST(@sal AS decimal(9,2)) / ISNULL(@comm,0) WHERE eid = @eid
			PRINT cast(@eid as varchar(99)) + ', ' + cast(@sal as varchar(99)) + ', ' +  cast(ISNULL(@comm,0) as varchar(99))+ ', ' +  cast(ISNULL(@bonus,0) as varchar(99))
			FETCH NEXT FROM cur_Emps_Bonus INTO @eid, @sal, @comm, @bonus
		END TRY
		BEGIN CATCH
			PRINT CAST(ERROR_NUMBER() AS VARCHAR(9)) + ': ' + ERROR_MESSAGE()
			FETCH NEXT FROM cur_Emps_Bonus INTO @eid, @sal, @comm, @bonus
		END CATCH
	END
	CLOSE cur_Emps_Bonus  
	DEALLOCATE cur_Emps_Bonus

	Select * from ##Emp3
END
--Usage:
EXEC CalcBonus
-------------------------------------------------


--SET operations Queries:

/*Note: SQL provides 3 set operations:
1) UNION: Combine all results from two query blocks into a single result, omitting any duplicates.
2) INTERSECT: Combine only those rows which the results of two query blocks have in common, omitting any duplicates.
3) EXCEPT: For two query blocks A and B, return all results from A which are not also present in B, omitting any duplicates.
*/

--List employ in Sales and/or Managers:
select * from emp
where jobtitle LIKE '%Manager%'
UNION
select * from emp
where jobtitle LIKE '%Sales%'
order by ename

--UNION vs UNION ALL:
--List employ in Sales and/or Managers:
select * from emp
where jobtitle LIKE '%Manager%'
UNION ALL
select * from emp
where jobtitle LIKE '%Sales%'
order by ename

--Using SET operations, list all emp names NOT managed by "Kylie" & "Bob":
SELECT * FROM emp
EXCEPT
SELECT * FROM emp WHERE managerid IN (68319, 66928)  -- IDs of "Kylie" & "Bob".

--Using CTE and SET operations, list all emp names NOT managed by "Kylie" & "Bob":
;WITH cte AS 
(
	SELECT * FROM emp WHERE managerid IN (68319, 66928)
)
SELECT * FROM emp
EXCEPT
SELECT * FROM cte
-------------------------------------------------



--DB TRIGGERS QUERIES:

--Create a trigger that logs eid & timestamp in another table (called 'Audit')
-- whenever data-rows/records are deleted in "emp" table.
create table audit (
	aid	int IDENTITY(1,1) PRIMARY KEY,
  	eid	int,
  	timestamp datetime
)

--Creating trigger:
CREATE TRIGGER tg_emp_del
ON emp
FOR DELETE
AS
BEGIN
     INSERT INTO audit (eid,timestamp)
     SELECT eid,getdate() --CURRENT_TIMESTAMP
     FROM DELETED 
END

--List all available tirggers:
select * from sys.triggers

--Delete some data from Emp table:
DELETE FROM emp
WHERE eid = 63679 --65646

------------------------------X------------------------------

